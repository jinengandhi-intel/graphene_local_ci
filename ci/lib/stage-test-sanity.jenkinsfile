stage('test') {
    try {
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/helloworld
                if [ "${GRAMINE_MUSL}" = "1" ]
                then
                    CC=musl-gcc make ${MAKEOPTS} all
                else
                    make ${MAKEOPTS} all
                fi
                make check 2>&1 | tee helloworld_result.txt
            '''
        }
    } catch (Exception e) {}

    if (env.node_label.contains("dcap")) {
        env.RA_TYPE='dcap'
        env.RA_TLS_MRSIGNER='any'
        env.RA_TLS_MRENCLAVE='any'
        env.RA_TLS_ISV_PROD_ID='any'
        env.RA_TLS_ISV_SVN='any'
        env.RA_TLS_ALLOW_DEBUG_ENCLAVE_INSECURE='1'
        env.RA_TLS_ALLOW_OUTDATED_TCB_INSECURE='1'
        env.RA_TLS_ALLOW_SW_HARDENING_NEEDED='1'
        env.RA_TLS_ALLOW_HW_CONFIG_NEEDED='1'

        try {
            timeout(time: 5, unit: 'MINUTES') {
                sh '''
                    cd CI-Examples/ra-tls-mbedtls
                    make check_dcap 2>&1 | tee mbedtls_result.txt
                '''
            }
        } catch (Exception e) {}

        try {
            timeout(time: 5, unit: 'MINUTES') {
                sh '''
                    cd CI-Examples/ra-tls-secret-prov
                    make check_dcap 2>&1 | tee secret_prov_result.txt
                '''
            }
        } catch (Exception e) {}

        try {
            timeout(time: 2, unit: 'MINUTES') {
                sh '''
                    export PID=$(lsof -t -i:8000)
                    if [ "$PID" != "" ]
                    then
                        echo "Killing $PID"
                        kill -9 $PID
                    fi
                    cd CI-Examples/ra-tls-nginx
                    make check 2>&1 | tee nginx_result.txt
                '''
            }
        } catch (Exception e) { }
    }
}

stage ('workload_verification') {
    try {
        timeout(time: 2, unit: 'MINUTES') {
            sh 'python3 -m pytest -v -m sanity --junit-xml workload-regression.xml test_workloads.py'
        }
    } catch (Exception e){
        env.build_ok = true
        sh 'echo "Workload parser failed"'
    }
    finally {
        junit 'workload-regression.xml'
    }
}

if (env.build_type != "manual") {
    stage ('pkg_version_verification') {
        timeout(time: 2, unit: 'MINUTES') {
            sh 'python3 verify_package_version.py'
        }
    }
}
