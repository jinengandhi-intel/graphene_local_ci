stage('test-sgx') {

    sh '''
        find ${GRAMINE_LIBDIR} -exec file {} \\; | \
            grep ELF | \
            cut -d':' -f1 | \
            xargs -L1 .ci/check-rwx.py
        if test -f "$GRAMINE_PKGLIBDIR"/runtime/glibc/libc.so.6
        then
            .ci/check-no-syscall.sh "$GRAMINE_PKGLIBDIR"/runtime/glibc/libc.so.6
        fi
        if test -f "$GRAMINE_PKGLIBDIR"/runtime/musl/libc.so
        then
            .ci/check-no-syscall.sh "$GRAMINE_PKGLIBDIR"/runtime/musl/libc.so
        fi
    '''

    if (os_release_id != "alpine") {
        try {
            timeout(time: 60, unit: 'MINUTES') {
                sh '''
                    cd libos/test/ltp
                    make ${MAKEOPTS} -f Makefile.LTP SGX=1 all
                '''
                // Run tests in a separate block, so that Jenkins measures build time and run time
                // separately
                sh '''
                    cd libos/test/ltp
                    python3 -m pytest -v  --junit-xml=ltp-sgx.xml
                '''
                /*
                sh '''
                    cd LibOS/shim/test/ltp
                    export CFG=ltp-sudo-syscalls.cfg
                    export LTPSCENARIO=$PWD/install-sgx/runtest/syscalls-sudo
                    make -f Makefile.LTP ltp-sgx_results_2.xml LTPCFG=$CFG LTPTESTFILE=$LTPSCENARIO
                '''
                */
            }
        } catch (Exception e) {
        } finally {
            archiveArtifacts 'libos/test/ltp/ltp-sgx.xml'
            junit 'libos/test/ltp/ltp-sgx.xml'
        }
    }

    try{
        timeout(time: (env.EDMM ? 120 : 10), unit: 'MINUTES') {
            sh '''
                cd CI-Examples/bash
                sed -i '/@rm OUTPUT/d' Makefile
                if [ "${os_release_id}" = "centos" ] || [ "${os_release_id}" = "almalinux" ] || [ "${os_release_id}" = "rockylinux" ] || [ "${os_release_id}" = "rhel" ] 
                then
                    sed -i "s/bin\\/readlink/bin\\/coreutils/" Makefile
                fi
                if [ "${os_release_id}" = "alpine" ]
                then
                    sed -i -e '/^fs.mounts = \\[.*/a \\{ path = "\\/usr\\/bin", uri="file:\\/usr\\/bin" },' manifest.template
                    sed -i -e '/^sgx.trusted_files = \\[.*/a \\"file:\\/usr\\/bin\\/",' manifest.template
                fi
                make ${MAKEOPTS} all
                make ${MAKEOPTS} SGX=1 regression 2>&1 | tee result.txt
            '''
        }
    } catch (Exception e) { }
 
    try {
        timeout(time: 15, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/memcached
                make ${MAKEOPTS} all
                make SGX=1 start-gramine-server &
                ../../scripts/wait_for_server 300 127.0.0.1 11211
                # memcslap populates server but doesn't report errors, use
                # memcached-tool for this (must return two lines of stats)
                if [ "${os_release_id}" = "ubuntu" ] || [ "${os_release_id}" = "debian" ]
                then
                    memcslap --servers=127.0.0.1 --concurrency=8
                else
                    memslap --servers=127.0.0.1 --concurrency=8
                fi
                src/scripts/memcached-tool 127.0.0.1 | wc -l 2>&1 | tee OUTPUT.txt
            '''
        }
    } catch (Exception e) { }

    try{
        timeout(time: (env.EDMM ? 45 : 5), unit: 'MINUTES') {
            sh '''
                cd CI-Examples/python
                if [ "${base_os}" != *"centos"* ]
                then
                    sed -i 's/sgx.enclave_size = "1G"/sgx.enclave_size = "2G"/g' python.manifest.template
                fi
                sed -i "s/wait_for_server 300 127.0.0.1 8005/wait_for_server 1000 127.0.0.1 8005/" run-tests.sh
                make ${MAKEOPTS}
                make ${MAKEOPTS} SGX=1 check
            '''
        }
    } catch (Exception e) {
    } finally {
        sh '''
            cat CI-Examples/python/TEST_STDOUT
        '''
    }

    try {
        timeout(time: 20, unit: 'MINUTES') {
            sh '''
                # TODO this logic is to check both epoll and select varants, and probably
                # should be split to check both of those separately and on all distros
                if .ci/isdistro xenial
                then
                    USE_SELECT=1
                    export USE_SELECT
                fi

                cd CI-Examples/redis
                make ${MAKEOPTS}
                make ${MAKEOPTS} SGX=1 start-gramine-server &
                ../../scripts/wait_for_server 300 127.0.0.1 6379
                ./src/src/redis-benchmark 2>&1 | tee OUTPUT
            '''
        }
    } catch (Exception e) { }

    try {
        timeout(time: 15, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/lighttpd
                make ${MAKEOPTS} all
                make ${MAKEOPTS} SGX=1 start-gramine-server &
                ../../scripts/wait_for_server 300 127.0.0.1 8003
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh http://127.0.0.1:8003
            '''
        }
    } catch (Exception e) { }

    try {
        timeout(time: (env.EDMM ? 60 : 15), unit: 'MINUTES') {
            sh '''
                cd CI-Examples/nginx
                export PID=$(lsof -t -i:8002)
                if [ "$PID" != "" ]
                then
                    echo "Killing $PID"
                    kill -9 $PID
                fi
                make ${MAKEOPTS} all
                make ${MAKEOPTS} SGX=1 start-gramine-server &
                ../../scripts/wait_for_server 360 127.0.0.1 8002
                if [ "${os_release_id}" != "ubuntu" ]
                then
                    sleep 450
                fi
                sleep 15
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh http://127.0.0.1:8002
            '''
        }
    } catch (Exception e) { }

    if (env.os_release_id != "alpine") {
        try {
            timeout(time: (env.EDMM ? 45 : 10), unit: 'MINUTES') {
                sh '''
                cd CI-Examples/blender
                if [ "${no_cpu}" -gt 16 ]
                then
                    sed -i 's/sgx.enclave_size = "2048M"/sgx.enclave_size = "4G"/g' blender.manifest.template
                    sed -i 's/sgx.max_threads = {{ .1. if env.get(.EDMM., .0.) == .1. else .64. }}/sgx.max_threads = {{ '"'"'1'"'"' if env.get('"'"'EDMM'"'"', '"'"'0'"'"') == '"'"'1'"'"' else '"'"'256'"'"' }}/g' blender.manifest.template
                fi
                make ${MAKEOPTS} all
                make ${MAKEOPTS} SGX=1 check
                '''
            }
        } catch (Exception e) { }
    }

    try{
        timeout(time: (env.EDMM ? 30 : 5), unit: 'MINUTES') {
            sh '''
                cd CI-Examples/sqlite
                if [ "${os_release_id}" = "alpine" ]
                then
                    sed -i -e '/^fs.mounts = \\[.*/a \\{ path = "\\/usr\\/{{ arch_libdir }}", uri="file:\\/usr\\/{{ arch_libdir }}" },' manifest.template
                    sed -i -e "/^sgx.trusted_files = \\[.*/a \\"file:\\/usr\\/{{ arch_libdir }}\\/\\"," manifest.template
                fi
                make ${MAKEOPTS} all
                make ${MAKEOPTS} SGX=1 regression
            '''
        }
    } catch (Exception e) { }

    if ((env.node_label.contains("dcap")) && (env.SGX == '1')) {
        try {
            timeout(time: 5, unit: 'MINUTES') {
                sh '''
                    export PID=$(lsof -t -i:4433)
                    if [ "$PID" != "" ]
                    then
                        echo "Killing $PID"
                        kill -9 $PID
                    fi
                    cd CI-Examples/ra-tls-mbedtls
                    export RA_TLS_MRSIGNER=any
                    export RA_TLS_MRENCLAVE=any
                    export RA_TLS_ISV_PROD_ID=any
                    export RA_TLS_ISV_SVN=any
                    RA_TLS_ALLOW_DEBUG_ENCLAVE_INSECURE=1 RA_TLS_ALLOW_OUTDATED_TCB_INSECURE=1 RA_TYPE=dcap \
                    make check_dcap 2>&1 | tee mbedtls_result.txt
                '''
            }
        } catch (Exception e) { }

        try {
            timeout(time: 5, unit: 'MINUTES') {
                sh '''
                    export PID=$(lsof -t -i:4433)
                    if [ "$PID" != "" ]
                    then
                        echo "Killing $PID"
                        kill -9 $PID
                    fi
                    cd CI-Examples/ra-tls-secret-prov
                    export RA_TLS_MRSIGNER=any
                    export RA_TLS_MRENCLAVE=any
                    export RA_TLS_ISV_PROD_ID=any
                    export RA_TLS_ISV_SVN=any
                    RA_TLS_ALLOW_DEBUG_ENCLAVE_INSECURE=1 RA_TLS_ALLOW_OUTDATED_TCB_INSECURE=1 RA_TYPE=dcap \
                    make check_dcap 2>&1 | tee secret_prov_result.txt
                '''
            }
        } catch (Exception e) { }

        try {
            timeout(time: 2, unit: 'MINUTES') {
                sh '''
                    export PID=$(lsof -t -i:8000)
                    if [ "$PID" != "" ]
                    then
                        echo "Killing $PID"
                        kill -9 $PID
                    fi
                    cd CI-Examples/ra-tls-nginx
                    export RA_TLS_MRSIGNER=any
                    export RA_TLS_MRENCLAVE=any
                    export RA_TLS_ISV_PROD_ID=any
                    export RA_TLS_ISV_SVN=any
                    make check 2>&1 | tee nginx_result.txt
                '''
            }
        } catch (Exception e) { }
    }

    try{
        timeout(time: 10, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/busybox
                make ${MAKEOPTS} all
                make ${MAKEOPTS} SGX=1 check 2>&1 | tee result.txt
            '''
        }
    } catch (Exception e) { }

    if(env.no_cpu.toInteger() > 16) 
    { 
        try{
            timeout(time: 5, unit: 'MINUTES') {
                sh '''
                    cd CI-Examples/go-helloworld
                    make SGX=1 check
                '''
            }
        } catch (Exception e) { }
    }
}
