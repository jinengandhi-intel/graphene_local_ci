stage('test-examples') {              
    if (env.SGX == "1") {
        env.MODE = "sgx"
    }
    else {
        env.MODE = "direct"
    }

    if (["ubuntu20.04"].contains(env.base_os)) {
        try {
            timeout(time: 60, unit: 'MINUTES') {
                sh '''
                    cd CI-Examples/tensorflow-lite
                    ../common_tools/download --output bazel-0.16.1-installer-linux-x86_64.sh \
                    --sha256 17ab70344645359fd4178002f367885e9019ae7507c9c1ade8220f3628383444 \
                    --url https://github.com/bazelbuild/bazel/releases/download/0.16.1/bazel-0.16.1-installer-linux-x86_64.sh
                    chmod +x ./bazel-0.16.1-installer-linux-x86_64.sh
                    ./bazel-0.16.1-installer-linux-x86_64.sh --user
                    if [ "${os_release_id}" != 'ubuntu' ]
                    then
                        make ${MAKEOPTS} tensorflow/configure
                        sed -i "s/\\/usr\\/bin\\/env python/\\/usr\\/bin\\/env python3/" tensorflow/tensorflow/tools/git/gen_git_source.py
                        make PYTHON_BIN_PATH=${PYTHON_BIN_PATH}
                    fi
                    make all
                    make ${MAKEOPTS} run-gramine | tee OUTPUT
                '''
            }
        } catch (Exception e) { }
    }

    try {
        timeout(time: 10, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/curl
                make ${MAKEOPTS} all
                make ${MAKEOPTS} check | tee RESULT
            '''
        }
    } catch (Exception e) { }

    try {
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/nodejs
                if [ "${os_release_id}" != 'ubuntu' ]
                then
                    sed -i "s/{{ nodejs_dir }}\\/nodejs/{{ nodejs_dir }}\\/node/g" nodejs.manifest.template
                fi
                make ${MAKEOPTS} all
                make ${MAKEOPTS} check | tee RESULT
            '''
        }
    } catch (Exception e) { }

    try {
        timeout(time: (env.EDMM ? 45 : 20), unit: 'MINUTES') {
            sh '''
                cd CI-Examples/r
                if [ "${os_release_id}" != 'ubuntu' ] && [ "${os_release_id}" != 'debian' ]  && \
                [ "${os_release_id}" != 'alpine' ]
                then
                    export R_HOME=/usr/lib64/R
                    sed -i \'/^sgx.trusted_files = \\[.*/a "file:/usr/bin/which",\' R.manifest.template
                    sed -i \'/^sgx.trusted_files = \\[.*/a "file:/usr/bin/uname",\' R.manifest.template
                    sed -i \'/^sgx.trusted_files = \\[.*/a "file:/usr/bin/sh",\' R.manifest.template
                    sed -i \'/^sgx.trusted_files = \\[.*/a "file:/usr/bin/rm",\' R.manifest.template
                fi
                if [ "${os_release_id}" = 'centos' ]
                then
                    sed -i \'/^sgx.trusted_files = \\[.*/a "file:/usr/bin/coreutils",\' R.manifest.template
                    sed -i \'/^sgx.trusted_files = \\[.*/a "file:/usr/lib64/libcap.so.2",\' R.manifest.template
                fi
                make ${MAKEOPTS} all
                gramine-${MODE} ./R --slave --vanilla -f scripts/sample.r | tee RESULT_1
            '''
        }
    } catch (Exception e) { }

    if (["ubuntu", "debian", "alpine"].contains(os_release_id)) {
        try {
            timeout(time: (env.EDMM ? 60 : 10), unit: 'MINUTES') {
                sh '''
                    cd CI-Examples/gcc
                    if [ "${base_os}" = 'ubuntu24.04' ]
                    then                   
                        sed -i -e '/^sgx.trusted_files = \\[.*/a \\"file:/usr/libexec/gcc/x86_64-linux-gnu\\/\\",' gcc.manifest.template
                    fi
                    if [ "${os_release_id}" == 'alpine' ]
                    then
                        sed -i "/file:\\/lib64/d" gcc.manifest.template
                    fi
                    make ${MAKEOPTS} all
                    make ${MAKEOPTS} check | tee OUTPUT
                '''
            }
        } catch (Exception e) { }
    }

    if ((!["ubuntu24.04", "alpine3.18"].contains(env.base_os)) && (env.node_label != "graphene_22.04_5.19")) {
        try {
            timeout(time: 30, unit: 'MINUTES') {
                sh '''
                    cd CI-Examples/pytorch
                    python3 download-pretrained-model.py
                    make ${MAKEOPTS} all
                    gramine-${MODE} ./pytorch ./pytorchexample.py
                '''
            }
        } catch (Exception e) { }
    }

    try {
        timeout(time: 30, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/rust
                export PID=$(lsof -t -i:3000)
                if [ "$PID" != "" ]
                then
                    echo "Killing $PID"
                    kill -9 $PID
                fi
                if [ "${os_release_id}" = "alpine" ]
                then
                    sed -i -e '/^fs.mounts = \\[.*/a \\{ path = "\\/usr\\/{{ arch_libdir }}", uri="file:\\/usr\\/{{ arch_libdir }}" },' rust-hyper-http-server.manifest.template
                    sed -i -e "/^sgx.trusted_files = \\[.*/a \\"file:\\/usr\\/{{ arch_libdir }}\\/\\"," rust-hyper-http-server.manifest.template
                fi
                make ${MAKEOPTS}
                make ${MAKEOPTS} start-gramine-server &
                ../../scripts/wait_for_server 300 127.0.0.1 3000
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh http://127.0.0.1:3000 | tee RESULT
            '''
        }
    } catch (Exception e) { }

    if (!((env.no_cpu.toInteger() < 16) && (env.SGX == '1'))) {
        if (!["ubuntu24.04", "alpine3.18"].contains(env.base_os)) {
            try {
                timeout(time: 30, unit: 'MINUTES') {
                    sh '''
                        cd CI-Examples/mongodb
                        if [ "${base_os}" = 'debian11' ]
                        then
                            sed -i 's/.*loader\\.env\\.LD_LIBRARY_PATH.*/loader\\.env\\.LD_LIBRARY_PATH = "\\/gramine_lib:\\/usr\\/{{ arch_libdir }}:\\/lib\\/x86_64-linux-gnu"/' mongod.manifest.template
                            sed -i 's/path = "\\/lib"/path = "\\/gramine_lib"/' mongod.manifest.template
                            sed -i -e '/^fs.mounts = \\[.*/a\\{ path="\\/lib\\/x86_64-linux-gnu", uri="file:\\/lib\\/x86_64-linux-gnu" },' mongod.manifest.template
                            sed -i -e '/^sgx.trusted_files = \\[.*/a \\"file:/lib/x86_64-linux-gnu\\/\\",' mongod.manifest.template
                        fi
                        export PID=$(lsof -t -i:27017)
                        if [ "$PID" != "" ]
                            then
                            echo "Killing $PID"
                            kill -9 $PID
                        fi
                        make
                        gramine-${MODE} mongod &
                        ../common_tools/wait_for_server 120 127.0.0.1 27017
                        mongosh scripts/insert.js
                        mongosh scripts/fetch.js | tee OUTPUT
                    '''
                }
            } catch (Exception e) { }
        }


        try {
            timeout(time: 30, unit: 'MINUTES') {
                sh '''
                    cd CI-Examples/openjdk
                    if [ "${os_release_id}" != 'ubuntu' ]
                    then
                        sed -i -e "/file:\\/usr\\/lib\\/jvm\\/java-11-openjdk-amd64/d" java.manifest.template
                        sed -i -e "/^sgx.trusted_files = \\[.*/a \\"file:$JAVAHOME\\/lib\\/\\"," java.manifest.template
                    fi
                    make ${MAKEOPTS} all
                    gramine-${MODE} java MultiThreadMain | tee OUTPUT
                '''
            }
        } catch (Exception e) { }

        if (["ubuntu20.04"].contains(env.base_os)) {
            try {
                timeout(time: 30, unit: 'MINUTES') {
                    sh '''#!/bin/bash
                        set -x
                        cd CI-Examples/openvino
                        chmod +x ./openvino_setup.sh
                        ./openvino_setup.sh
                        source openvino_2021/bin/setupvars.sh
                        sed -i 's/intel_models public_models/intel_models/' Makefile
                        make ${MAKEOPTS} intel_models
                        model_name="bert-large-uncased-whole-word-masking-squad-0001"
                        make ${MAKEOPTS} all
                        gramine-${MODE} benchmark_app -m model/intel/${model_name}/FP32/${model_name}.xml | tee OUTPUT
                    '''
                }
            } catch (Exception e) { }
        }

        if (["ubuntu20.04", "ubuntu22.04"].contains(env.base_os)) {
            try {
                timeout(time: (env.EDMM ? 60 : 30), unit: 'MINUTES') {
                    sh '''
                        cd CI-Examples/scikit-learn-intelex
                        sed -i "s/\\/home\\/user\\/.local\\/lib/\\/usr\\/local\\/lib/" sklearnex.manifest.template
                        sed -i "s/{{ env.HOME }}\\/.local\\/lib/\\/usr\\/local\\/lib/" sklearnex.manifest.template
                        python3 scripts/download_dataset.py
                        make ${MAKEOPTS} all
                        ./run_tests.sh | tee RESULT
                    '''
                }
            } catch (Exception e) { }
        }

        if (["ubuntu", "debian"].contains(env.os_release_id)) {
            try {
                timeout(time: (env.EDMM ? 65 : 25), unit: 'MINUTES') {
                    sh '''
                        export PID=$(lsof -t -i:8501)
                        if [ "$PID" != "" ]
                        then
                            echo "Killing $PID"
                            kill -9 $PID
                        fi
                        cd CI-Examples/tfserving
                        sudo make install-dependencies
                        make all
                        make ${MAKEOPTS} check 2>&1 | tee RESULT
                    '''
                }
            } catch (Exception e) { }
        }
    }

    try {
        timeout(time: 20, unit: 'MINUTES') {
            sh '''
                export PID=$(lsof -t -i:5201)
                if [ "$PID" != "" ]
                then
                    echo "Killing $PID"
                    kill -9 $PID
                fi
                cd CI-Examples/iperf
                make all
                gramine-${MODE} iperf3 & echo $! > server.PID
                ../common_tools/wait_for_server 120 127.0.0.1 5201;
                LD_LIBRARY_PATH=./install ./install/iperf3 -c localhost -p 5201 2>&1 | tee OUTPUT
                kill $(cat server.PID)
            '''
        }
    } catch (Exception e) { }
}
