stage('test-direct') {
    sh '''
        find ${GRAMINE_LIBDIR} -exec file {} \\; | \
            grep ELF | \
            cut -d':' -f1 | \
            xargs -L1 .ci/check-rwx.py
    '''

    if (os_release_id != "alpine") {
        try {
            timeout(time: 30, unit: 'MINUTES') {
                sh '''
                    cd libos/test/ltp
                    make ${MAKEOPTS} -f Makefile.LTP all
                '''
                // Run tests in a separate block, so that Jenkins measures build time and run time
                // separately
                sh '''
                    cd libos/test/ltp
                    python3 -m pytest -v  --junit-xml=ltp.xml
                '''
                /*
                sh '''
                    cd libos/shim/test/ltp
                    export CFG=ltp-sudo-syscalls.cfg
                    export LTPSCENARIO=$PWD/install/runtest/syscalls-sudo
                    make -f Makefile.LTP ltp_results_2.xml LTPCFG=$CFG LTPTESTFILE=$LTPSCENARIO
                '''
                */
            }
        } catch (Exception e) {
        } finally {
            archiveArtifacts 'libos/test/ltp/ltp.xml'
            junit 'libos/test/ltp/ltp.xml'
        }
    }

    try {
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/python
                make ${MAKEOPTS} DEBUG=1 all
                make check
            '''
        }
    } catch (Exception e) {
    } finally {
        sh '''
            cat CI-Examples/python/TEST_STDOUT
        '''
    }

    try {
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/bash
                sed -i '/@rm OUTPUT/d' Makefile
                if [ "${os_release_id}" = "centos" ] || [ "${os_release_id}" = "almalinux" ] || [ "${os_release_id}" = "rockylinux" ] || [ "${os_release_id}" = "rhel" ]
                then
                    sed -i "s/bin\\/readlink/bin\\/coreutils/" Makefile
                fi
                if [ "${os_release_id}" = "alpine" ]
                then
                    sed -i -e '/^fs.mounts = \\[.*/a \\{ path = "\\/usr\\/bin", uri="file:\\/usr\\/bin" },' manifest.template
                fi
                make ${MAKEOPTS} all
                make ${MAKEOPTS} regression 2>&1 | tee result.txt
            '''
        }
    } catch (Exception e) { }

    try {
        timeout(time: 10, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/memcached
                make ${MAKEOPTS} all
                make start-gramine-server &
                ../../scripts/wait_for_server 10 127.0.0.1 11211
                # memcslap populates server but doesn't report errors, use
                # memcached-tool for this (must return two lines of stats)
                if [ "${os_release_id}" = "ubuntu" ] || [ "${os_release_id}" = "debian" ]
                then
                    memcslap --servers=127.0.0.1 --concurrency=8
                else
                    memslap --servers=127.0.0.1 --concurrency=8
                fi
                src/scripts/memcached-tool 127.0.0.1 | wc -l 2>&1 | tee OUTPUT.txt
            '''
        }
    } catch (Exception e) { }

    try {
        timeout(time: 10, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/redis
                if .ci/isdistro xenial
                then
                    USE_SELECT=1
                    export USE_SELECT
                fi
                make ${MAKEOPTS} all
                make start-gramine-server &
                ../../scripts/wait_for_server 5 127.0.0.1 6379
                ./src/src/redis-benchmark 2>&1 | tee OUTPUT
            '''
        }
    } catch (Exception e) { }

    try {
        timeout(time: 10, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/lighttpd
                make ${MAKEOPTS} all
                make ${MAKEOPTS} start-gramine-server &
                ../../scripts/wait_for_server 5 127.0.0.1 8003
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh http://127.0.0.1:8003
            '''
        }
    } catch (Exception e) { }

    try {
        timeout(time: 10, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/nginx
                export PID=$(lsof -t -i:8002)
                if [ "$PID" != "" ]
                then
                    echo "Killing $PID"
                    kill -9 $PID
                fi    
                make ${MAKEOPTS} all
                make ${MAKEOPTS} start-gramine-server &
                ../../scripts/wait_for_server 360 127.0.0.1 8002
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh http://127.0.0.1:8002
            '''
        }
    } catch (Exception e) { }

    if (env.os_release_id != "alpine") {
        try {
            timeout(time: 10, unit: 'MINUTES') {
                sh '''
                    cd CI-Examples/blender
                    make ${MAKEOPTS} all
                    make check
                '''
            }
        } catch (Exception e) { }
    }

    try{
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/sqlite
                if [ "${os_release_id}" = "alpine" ]
                then
                    sed -i -e '/^fs.mounts = \\[.*/a \\{ path = "\\/usr\\/{{ arch_libdir }}", uri="file:\\/usr\\/{{ arch_libdir }}" },' manifest.template
                    sed -i -e "/^sgx.trusted_files = \\[.*/a \\"file:\\/usr\\/{{ arch_libdir }}\\/\\"," manifest.template
                fi
                make ${MAKEOPTS} all
                make ${MAKEOPTS} regression
            '''
        }
    } catch (Exception e) { }
    
    try{
        timeout(time: 10, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/busybox
                make ${MAKEOPTS} all
                make ${MAKEOPTS} check 2>&1 | tee result.txt
            '''
        }
    } catch (Exception e) { }

    try{
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/go-helloworld
                make check
            '''
        }
    } catch (Exception e) { }
}
