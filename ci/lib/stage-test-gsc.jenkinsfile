stage('Test') {
    try {
        if ((env.os_release_id == "debian") || env.os_release_id.contains("redhat") || (env.os_release_id == "quay.io/centos/centos")) {
            env.runtime_args = "-c ls"
        } else {
            env.runtime_args = "-c free"
        }
        sh '''
            docker run --device=/dev/sgx_enclave \
                -v /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket \
                gsc-bash-test ${runtime_args} 2>&1 | tee bash_result
        '''
    } catch (Exception e) {}

    try {
        sh '''
            docker run --device=/dev/sgx_enclave \
                -v /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket \
                gsc-python-test -c 'print("HelloWorld!")' 2>&1 | tee python_result
        '''
    } catch (Exception e) {}

    try {
        sh '''
            docker run --device=/dev/sgx_enclave \
                -v /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket \
                gsc-helloworld-test 2>&1 | tee helloworld_result
        '''
    } catch (Exception e) {}

    try {
        sh '''
            docker run --device=/dev/sgx_enclave --env GRAMINE_MODE=direct \
                -v /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket \
                --security-opt seccomp=unconfined gsc-helloworld-test 2>&1 | tee helloworld_direct_result
        '''
    } catch (Exception e) {}

    try {
        if ((env.os_release_id == "debian") || env.os_release_id.contains("redhat") || (env.os_release_id == "quay.io/centos/centos")) {
            env.runtime_args = "-c ls"
        } else {
            env.runtime_args = "-c free"
        }
        sh '''
            docker run --device=/dev/sgx_enclave \
                -v /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket \
                gsc-gramine-build-bash-test ${runtime_args} 2>&1 | tee gramine_build_bash_result
        '''
    } catch (Exception e) {}

    if (env.distro_ver == "debian:11") {
        try {
            sh '''
                docker run --device=/dev/sgx_enclave \
                    -v /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket \
                    gsc-java-simple-test 2>&1 | tee openjdk-simple_result
            '''
        } catch (Exception e) {}

        try {
            sh '''
                docker run --device=/dev/sgx_enclave \
                    -v /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket \
                    -p 8080:8080 \
                    -d gsc-java-spring-boot-test 2>&1 | tee openjdk-spring-boot_result
                wget -O- localhost:8080 | tee openjdk-spring-boot_result
            '''
        } catch (Exception e) {}
   }

   if (env.distro_ver == "ubuntu:22.04") {
        try {
            sh '''
                MR_ENCLAVE=`awk -F '"' '/mr_enclave/{print $2}' gsc_pytorch_image_info`
                MR_SIGNER=`awk -F '"' '/mr_signer/{print $2}' gsc_pytorch_image_info`
                docker run --net=host  --device=/dev/sgx/enclave -e RA_TLS_ALLOW_OUTDATED_TCB_INSECURE=1 -e RA_TLS_MRENCLAVE=$MR_ENCLAVE \
                    -e RA_TLS_MRSIGNER=$MR_SIGNER -e RA_TLS_ISV_PROD_ID=0 -e RA_TLS_ISV_SVN=0  -e RA_TLS_ALLOW_SW_HARDENING_NEEDED=1 \
                    -v $WORKSPACE/verifier/ssl_common:/ra-tls-secret-prov/ssl -v $WORKSPACE/test/pytorch/base_image_helper:/keys \
                    -dt verifier:latest 2>&1 | tee gsc_pytorch_verifier_result

                docker run --net=host --rm --device=/dev/sgx/enclave -e SECRET_PROVISION_SERVERS=localhost:4433 \
                    -v /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket -t gsc-pytorch-encrypted 2>&1 | tee gsc_pytorch_result
            '''
        } catch (Exception e) {}
   }

   if (env.distro_ver == "ubuntu:22.04") {
        try {
            sh '''
                MR_ENCLAVE=`awk -F '"' '/mr_enclave/{print $2}' gsc_ovms_image_info`
                MR_SIGNER=`awk -F '"' '/mr_signer/{print $2}' gsc_ovms_image_info`
                docker run --net=host  --device=/dev/sgx/enclave -e RA_TLS_ALLOW_OUTDATED_TCB_INSECURE=1 -e RA_TLS_MRENCLAVE=$MR_ENCLAVE \
                    -e RA_TLS_MRSIGNER=$MR_SIGNER -e RA_TLS_ISV_PROD_ID=0 -e RA_TLS_ISV_SVN=0  -e RA_TLS_ALLOW_SW_HARDENING_NEEDED=1 \
                    -v $WORKSPACE/verifier/ssl_common:/ra-tls-secret-prov/ssl -v $WORKSPACE/test/pytorch/base_image_helper:/keys \
                    -dt verifier:latest 2>&1 | tee gsc_ovms_verifier_result

                docker run -u $(id -u):$(id -g) -p 9000:9000 -v /mnt/tmpfs/model_encrypted:/mnt/tmpfs/model_encrypted \
                -v /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket --net=host --rm --device=/dev/sgx/enclave \
                -e SECRET_PROVISION_SERVERS=localhost:4433 \
                -dt gsc-ovms-image 2>&1 | tee gsc_ovms_result

                sleep 60

                bash test/ovms/commands.sh
            '''
        } catch (Exception e) {
                sh 'Exception while starting verifier or ovms'
        }

   }

}

stage ('verification') {
    try {
        timeout(time: 2, unit: 'MINUTES') {
            sh 'python3 -m pytest -v -m gsc --disable-warnings --junit-xml gsc-workload.xml test_workloads.py'
        }
    } catch (Exception e){}
    finally {
        junit 'gsc-workload.xml'
    }
}

stage('Docker images cleanup') {
    sh '''
        docker stop $(docker ps -aq) &> /dev/null
        docker rm $(docker ps -aq) &> /dev/null
        docker image prune -af &> /dev/null
        docker system prune -af &> /dev/null
    '''
}
