stage('build') {
    if (env.CC == 'clang') {
        env.MESON_OPTIONS += ' -Dmusl=disabled'
    }
    try {
        sh '''
            cd "$WORKSPACE"        
            git apply rename_protected_file.patch
        '''        
    } catch (Exception e){
        env.build_ok = true
        sh 'echo "Failed to apply Git patch for FS testcase"'
    }
    script {
        if (env.build_type == "manual") {

            if (env.node_label == "graphene_oot") {
                sh '''
                    cd /opt/intel
                    git clone https://github.com/intel/linux-sgx-driver.git
                    cd linux-sgx-driver
                    git checkout 276c5c6a064d22358542f5e0aa96b1c0ace5d695

                '''

                 try {
                    sh '''
                    cd "$WORKSPACE"
                    meson setup build \
                        --werror \
                        --prefix="$PREFIX" \
                        --buildtype="$BUILDTYPE" \
                        -Ddirect=disabled \
                        -Dsgx=enabled \
                        -Dtests=enabled \
                        -Dsgx_driver=oot \
                        $MESON_OPTIONS > meson_cmd_output.txt
                    ninja -vC build > ninja_build_log.txt
                    ninja -vC build install > ninja_install_log.txt
                    gramine-sgx-gen-private-key
                    '''
                } finally {
                    archiveArtifacts 'build/meson-logs/**/*'
                    archiveArtifacts 'ninja_build_log.txt'
                    archiveArtifacts 'ninja_install_log.txt'                    
                }

            } else if (env.node_label == "graphene_dcap") {
                sh '''
                    cd /opt/intel
                    git clone https://github.com/intel/SGXDataCenterAttestationPrimitives.git
                    cd SGXDataCenterAttestationPrimitives
                    git checkout DCAP_1.6
                '''

                try {
                    sh '''
                    cd "$WORKSPACE"
                    meson setup build \
                        --werror \
                        --prefix="$PREFIX" \
                        --buildtype="$BUILDTYPE" \
                        -Ddirect=disabled \
                        -Dsgx=enabled \
                        -Dtests=enabled \
                        -Dsgx_driver=dcap1.6 \
                        $MESON_OPTIONS > meson_cmd_output.txt
                    ninja -vC build > ninja_build_log.txt
                    ninja -vC build install > ninja_install_log.txt
                    gramine-sgx-gen-private-key
                    '''
                } finally {
                    archiveArtifacts 'build/meson-logs/**/*'
                    archiveArtifacts 'ninja_build_log.txt'
                    archiveArtifacts 'ninja_install_log.txt'                       
                }

            } else {
                try {
                    sh '''
                    cd "$WORKSPACE"
                    sed -i "/uname/ a '/usr/src/linux-headers-@0@/arch/x86/include/uapi'.format(run_command('uname', '-r').stdout().split('-generic')[0].strip())," meson.build
                    meson setup build \
                        --werror \
                        --prefix="$PREFIX" \
                        --buildtype="$BUILDTYPE" \
                        -Ddirect=disabled \
                        -Dtests=enabled \
                        -Dsgx=enabled \
                        $MESON_OPTIONS > meson_cmd_output.txt
                    ninja -vC build > ninja_build_log.txt
                    ninja -vC build install > ninja_install_log.txt
                    gramine-sgx-gen-private-key
                '''
                } finally {
                    archiveArtifacts 'build/meson-logs/**/*'
                    archiveArtifacts 'ninja_build_log.txt'
                    archiveArtifacts 'ninja_install_log.txt'                      
                }
            }

            // Absolute path to libdir, as configured by Meson.
            // For our current builds this should be "$WORKSPACE/usr/lib/x86_64-linux-gnu":
            // --prefix is set from $PREFIX above (see config-docker.jenkinsfile) and should be "$WORKSPACE/usr";
            // --libdir is distro-dependent, but on Debian and derivatives it's "lib/x86_64-linux-gnu"
            libdir = sh(returnStdout: true, script: '''
                meson introspect build/ --buildoptions \
                | jq -r '(map(select(.name == "prefix")) + map(select(.name == "libdir"))) | map(.value) | join("/")'
            ''').trim()

            env.GRAMINE_PKGLIBDIR = libdir + '/gramine'

            // In CI we install to non-standard --prefix (see above). This makes sure the libraries are
            // available anyway (e.g. gramine-sgx-pf-crypt needs libsgx_util.so).
            env.PKG_CONFIG_PATH = libdir + '/pkgconfig'

            // prevent cheating and testing from repo
            sh 'rm -rf build'
            sh 'git clean -Xf subprojects'
        } else {

            sh '''sudo apt-key adv --keyserver-options http-proxy=http://proxy-chain.intel.com:911 \
             --fetch-keys https://packages.grapheneproject.io/graphene.asc
             echo "deb [arch=amd64 signed-by=EA3C2D624681AC968521587A5EE1171912234070] \
             https://packages.grapheneproject.io/ unstable main" | sudo tee /etc/apt/sources.list.d/graphene-unstable.list
             sudo apt update
            '''

            if (env.build_type == "package_in_kernel") {
                sh 'sudo apt install graphene-inkernel'
            } else if (env.build_type == "package_oot") {
                sh 'sudo apt install graphene-oot'
            } else if (env.build_type == "package_dcap") {
                sh 'sudo apt install graphene-dcap'
            } else {
                currentBuild.result = "ABORTED"
                error("Aborting the build")
            }

            //sh 'dpkg -i /home/rasp/jenkins/preview_bins/graphenepreview-inkernel_0.0.20210630-1_amd64.deb'
            //sh 'dpkg -i /home/rasp/jenkins/preview_bins/graphenepreview-inkernel_0.0.20210630-1_amd64.deb'
            
            //env.GRAPHENE_PKGLIBDIR = '/usr/lib/x86_64-linux-gnu/graphene'
        }
    }
}

