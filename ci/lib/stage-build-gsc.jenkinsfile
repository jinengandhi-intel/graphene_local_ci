stage('Build Workloads') {
    env.config_os = distro_ver.replace("/", "\\/")
    sh '''
        docker system prune -af
        openssl genrsa -3 -out enclave-key.pem 3072
        cp -f config.yaml.template config.yaml
    '''

    // Build Bash Workload
    try {
        if (env.os_release_id.contains("centos") || env.os_release_id.contains("redhat")) {
            sh 'cp -rf test/centos-bash.dockerfile test/bash.dockerfile'
        } else if (env.os_release_id.contains("suse")) {
            sh 'cp -rf test/suse-bash.dockerfile test/bash.dockerfile'
        } else {
            sh '''
                cp -rf test/ubuntu20.04-bash.dockerfile test/bash.dockerfile
                sed -i -e "s/FROM ubuntu:20.04/FROM $distro_ver/g" test/bash.dockerfile
            '''
        }
        sh '''
            docker build --tag bash-test --build-arg BUILD_OS=${distro_ver} --file test/bash.dockerfile .
            ./gsc build -nc --insecure-args bash-test test/ubuntu20.04-bash.manifest
            ./gsc sign-image --remove-gramine-deps bash-test enclave-key.pem
            ./gsc info-image gsc-bash-test
        '''
    } catch (Exception e) {}

    // Build Python Latest Workload
    try {
        sh '''
            if [ "${os_release_id}" != "debian" ]
            then
                docker build --tag python-test --build-arg BUILD_OS=${distro_ver} --file test/python.dockerfile .
            fi
            if [ "${distro_ver}" = "debian:11" ]
            then
                docker pull python:bullseye
                docker image tag python:bullseye python-test
            fi
            if [ "${distro_ver}" = "debian:12" ]
            then
                docker pull python:bookworm
                docker image tag python:bookworm python-test
            fi
            ./gsc build -nc --insecure-args python-test test/generic.manifest
            ./gsc sign-image --remove-gramine-deps python-test enclave-key.pem
            ./gsc info-image gsc-python-test
        '''
    } catch (Exception e) {}

    sh '''
        sed -i -E 's/Distro: "(.+)"/Distro: "'"$config_os"'"/g' config.yaml
    '''

    // Build Bash HelloWorld Workload
    try {
        if (env.os_release_id.contains("centos") || env.os_release_id.contains("redhat")) {
            sh 'cp -rf test/centos-helloworld.dockerfile test/helloworld.dockerfile'
        } else if (env.os_release_id.contains("suse")) {
            sh 'cp -rf test/suse-helloworld.dockerfile test/helloworld.dockerfile'
        } else {
            sh '''
                cp -rf test/ubuntu22.04-hello-world.dockerfile test/helloworld.dockerfile
                sed -i -e "s/FROM ubuntu:22.04/FROM $distro_ver/g" test/helloworld.dockerfile
            '''
        }
        sh '''
            docker build --tag helloworld-test --build-arg BUILD_OS=${distro_ver} --file test/helloworld.dockerfile .
            ./gsc build -nc --insecure-args helloworld-test test/ubuntu22.04-hello-world.manifest
            ./gsc sign-image --remove-gramine-deps helloworld-test enclave-key.pem
            ./gsc info-image gsc-helloworld-test
        '''
    } catch (Exception e) {}

    // GSC build-gramine Bash Workload
    try {
        if (env.os_release_id.contains("centos") || env.os_release_id.contains("redhat")) {
            sh 'cp -rf test/centos-bash.dockerfile test/bash.dockerfile'
        } else if (env.os_release_id.contains("suse")) {
            sh 'cp -rf test/suse-bash.dockerfile test/bash.dockerfile'
        } else {
            sh '''
                cp -rf test/ubuntu20.04-bash.dockerfile test/bash.dockerfile
                sed -i -e "s/FROM ubuntu:20.04/FROM $distro_ver/g" test/bash.dockerfile
            '''
        }
        sh '''
            docker build --tag gramine-build-bash-test --build-arg BUILD_OS=${distro_ver} --file test/bash.dockerfile .
            ./gsc build-gramine bash20.04
            sed -i 's|Repository: "https://github.com/gramineproject/gramine.git"|#Repository: "https://github.com/gramineproject/gramine.git"|g' config.yaml
            sed -i 's|Branch:     "master"|#Branch:     "master"|g' config.yaml
            sed -i 's|Gramine:|Gramine:\\n    Image: "bash20.04"|g' config.yaml
            ./gsc build -nc --insecure-args gramine-build-bash-test test/ubuntu20.04-bash.manifest
            ./gsc sign-image --remove-gramine-deps gramine-build-bash-test enclave-key.pem
            ./gsc info-image gsc-gramine-build-bash-test
        '''
    } catch (Exception e) {}
    
    if (env.distro_ver == "debian:11") {
        try {
            sh '''
                cd Examples/java-simple
                docker build --tag java-simple-test .
                cd ../../
                ./gsc build java-simple-test Examples/java-simple/java-simple.manifest
                ./gsc sign-image java-simple-test enclave-key.pem
                ./gsc info-image gsc-java-simple-test
            '''
        } catch (Exception e) {}

        try {
            sh '''
                cd Examples/java-spring-boot
                export PATH=$PATH:/opt/gradle/gradle-7.6.4/bin
                cd spring-boot-web-service/ && gradle build -Dhttp.proxyHost=proxy-iind.intel.com -Dhttp.proxyPort=911 -Dhttps.proxyHost=proxy-iind.intel.com -Dhttps.proxyPort=912
                cd ../ && docker build --tag java-spring-boot-test .
                cd ../../
                ./gsc build java-spring-boot-test Examples/java-spring-boot/java-spring-boot.manifest
                ./gsc sign-image java-spring-boot-test enclave-key.pem
                ./gsc info-image gsc-java-spring-boot-test
            '''
        } catch (Exception e) {}
    }
}
