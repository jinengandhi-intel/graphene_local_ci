node (node_label) {
    env.ORIG_WKSP = env.WORKSPACE
    def build_ok = true
    try {
        stage('checkout'){
            dir ('./') {
                git url: 'https://github.com/jinengandhi-intel/graphene_local_ci.git'
            }

            dir('graphene') {
                git url: 'https://github.com/oscarlab/graphene.git'
            }
        }

        dir ("graphene") {
            sh 'cp -rf $WORKSPACE/ltp_src LibOS/shim/test/ltp/'
            sh 'cp -rf $WORKSPACE/ltp_config/* LibOS/shim/test/ltp/'
            sh 'cp -rf $WORKSPACE/stress-ng Examples/'
            sh 'cp -f $WORKSPACE/test_workloads.py . '
            env.WORKSPACE = env.WORKSPACE + "/graphene"
            env.SGX = '1'

            sh 'sed -i -e \'s/dent != g_dentry_root && dent->state & DENTRY_VALID/0/\' \
                $WORKSPACE/LibOS/shim/src/fs/shim_fs.c'
            sh 'sed -i \'s/.release  = "3.10.0"/.release  = "5.10.0"/\' \
                $WORKSPACE/LibOS/shim/src/sys/shim_uname.c'

            sh 'sed -i -e \'/dist\\|apport/c\\\' $WORKSPACE/Examples/python/python.manifest.template'

            sh 'sed -i \'48 a fs.mount.dmalatency.type = "chroot"\\n \
                fs.mount.dmalatency.path="/dev/cpu_dma_latency"\\n \
                fs.mount.dmalatency.uri="file:/dev/cpu_dma_latency"\\n \
                \\nsgx.allowed_files.dmalatency="file:/dev/cpu_dma_latency"\\n\' \
                $WORKSPACE/LibOS/shim/test/ltp/manifest.LTP'

            load '../ci/config-docker.jenkinsfile'
            
            load '.ci/lib/config.jenkinsfile'
            load '.ci/lib/config-ubuntu18.04.jenkinsfile'
            load '.ci/lib/config-release.jenkinsfile'

            load '../ci/stage-build-sgx.jenkinsfile'
            load '../ci/stage-test.jenkinsfile'
            load '../ci/stage-test-sgx.jenkinsfile'
            load '../ci/stage-test-stress-ng.jenkinsfile'
        }
    } finally {
        stage('cleanup'){
            sh 'rm -rf $ORIG_WKSP/*'
        }
    }

    if(build_ok) {
        currentBuild.result = "SUCCESS"
    } else {
        currentBuild.result = "FAILURE"
    }
}
