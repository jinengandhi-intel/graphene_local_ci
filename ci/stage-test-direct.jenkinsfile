stage('test-direct') {
    env.gcc_dump_machine = sh(script:'gcc -dumpmachine', returnStdout: true).trim()
    env.ARCH_LIB_OPT = ""
    if(env.gcc_dump_machine == "x86_64-redhat-linux") 
    {
        env.ARCH_LIB_OPT = "ARCH_LIBDIR=/lib64"
    }
    try {
        timeout(time: 30, unit: 'MINUTES') {
            sh '''
                cd LibOS/shim/test/ltp
                make ${MAKEOPTS} -f Makefile.LTP all LTPCFG=$CFG LTPTESTFILE=$PWD$LTPSCENARIO
                make -f Makefile.LTP ltp_results_1.xml LTPCFG=$CFG LTPTESTFILE=$PWD$LTPSCENARIO
            '''
            /*
            sh '''
                cd LibOS/shim/test/ltp
                export CFG=ltp-sudo-syscalls.cfg
                export LTPSCENARIO=$PWD/install/runtest/syscalls-sudo
                make -f Makefile.LTP ltp_results_2.xml LTPCFG=$CFG LTPTESTFILE=$LTPSCENARIO
            '''
            */
        }
    } catch (Exception e){
        build_ok = false
        sh 'echo "LTP Test Failed"'
    } finally {
        archiveArtifacts 'LibOS/shim/test/ltp/ltp_results_*.xml'
        junit 'LibOS/shim/test/ltp/ltp_results_*.xml'
    }

    try{
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd Examples/python
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make check
            '''
        }
    } catch (Exception e){
        build_ok = false
        sh 'echo "Python Example Test Failed"'
    }

    try{
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd Examples/bash
                sed -i '/@rm OUTPUT/d' Makefile
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make ${MAKEOPTS} regression
            '''
        }
    } catch (Exception e){
        build_ok = false
        sh 'echo "Bash Example Test Failed"'
    }

    try {
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd Examples/curl
                sed -i '/@rm OUTPUT/d' Makefile
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make ${MAKEOPTS} check
            '''
        }
    } catch (Exception e){
        build_ok = false
        sh 'echo "Curl Example Test Failed"'
    }

    try {
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd Examples/gcc
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make ${MAKEOPTS} check
            '''
        }
    } catch (Exception e){
        build_ok = false
        sh 'echo "GCC Example Test Failed"'
    }

    try {
        timeout(time: 10, unit: 'MINUTES') {
            sh '''
                cd Examples/memcached
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make start-graphene-server &
                ../../Scripts/wait_for_server 5 127.0.0.1 11211
                # memcslap populates server but doesn't report errors, use
                # memcached-tool for this (must return two lines of stats)
                memcslap --servers=127.0.0.1 --concurrency=8
                src/scripts/memcached-tool 127.0.0.1 | wc -l | grep -w "2"
            '''
        }
    } catch (Exception e){
        build_ok = false
        sh 'echo "Memcached Example Test Failed"'
    }

    try {
        timeout(time: 10, unit: 'MINUTES') {
            sh '''
                cd Examples/redis
                if .ci/isdistro xenial
                then
                    USE_SELECT=1
                    export USE_SELECT
                fi
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make start-graphene-server &
                ../../Scripts/wait_for_server 5 127.0.0.1 6379
                ./src/src/redis-benchmark 2>&1 | tee OUTPUT
            '''
        }
    } catch (Exception e){
        build_ok = false
        sh 'echo "Redis Example Test Failed"'
    }

    try {
        timeout(time: 10, unit: 'MINUTES') {
            sh '''
                cd Examples/lighttpd
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make ${MAKEOPTS} start-graphene-server &
                ../../Scripts/wait_for_server 5 127.0.0.1 8003
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh 127.0.0.1:8003
            '''
        }
    } catch (Exception e){
        build_ok = false
        sh 'echo "Lighttpd Example Test Failed"'
    }

    try {
        timeout(time: 10, unit: 'MINUTES') {
            sh '''
                cd Examples/nginx
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make ${MAKEOPTS} start-graphene-server &
                ../../Scripts/wait_for_server 5 127.0.0.1 8002
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh 127.0.0.1:8002
            '''
        }
    } catch (Exception e){
        build_ok = false
        sh 'echo "NGINX Example Test Failed"'
    }

        /*
        timeout(time: 20, unit: 'MINUTES') {
            sh '''
                cd Examples/apache
                make ${MAKEOPTS} all
                make ${MAKEOPTS} start-graphene-server &
                ../../Scripts/wait_for_server 5 127.0.0.1 8001
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh 127.0.0.1:8001
                ../../Scripts/wait_for_server 5 127.0.0.1 8443
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh https://127.0.0.1:8443
            '''
        }
        */

    try {    
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd Examples/blender
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make check
            '''
        }
    } catch (Exception e){
        build_ok = false
        sh 'echo "Blender Example Test Failed"'
    }

    try {
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd Examples/r
                sed -i '/@$(RM) OUTPUT/d' Makefile
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make check
            '''
        }
    } catch (Exception e){
        build_ok = false
        sh 'echo "R Example Test Failed"'
    }

    try {
        timeout(time: 2, unit: 'MINUTES') {
            sh 'python3 -m pytest -v --junit-xml workload-regression.xml test_workloads.py'
        }
    } catch (Exception e){
        build_ok = true
        sh 'echo "Workload parser failed"'
    } finally {
        junit 'workload-regression.xml'
    }
}
