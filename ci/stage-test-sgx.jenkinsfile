stage('test-sgx') {
    env.gcc_dump_machine = sh(script:'gcc -dumpmachine', returnStdout: true).trim()
    env.ARCH_LIB_OPT = ""
    if(env.gcc_dump_machine == "x86_64-redhat-linux") 
    {
        env.ARCH_LIB_OPT = "ARCH_LIBDIR=/lib64"
    }    
    env.no_cpu = sh(script:'nproc', returnStdout: true).trim()
    try {
        timeout(time: 60, unit: 'MINUTES') {
            sh '''
                cd LibOS/shim/test/ltp
                make ${MAKEOPTS} -f Makefile.LTP SGX=1 all sgx-tokens LTPCFG="$CFG" LTPTESTFILE=$PWD$LTPSCENARIO
                sed -i '77 a sgx.allowed_files.pipe202child = "file:pipe2_02_child"' $PWD/install-sgx/testcases/bin/pipe2_02.manifest
                sed -i '78 a sgx.allowed_files.execvpchild = "file:execvp01_child"' $PWD/install-sgx/testcases/bin/execvp01.manifest
                sed -i '79 a sgx.allowed_files.execvchild = "file:execv01_child"' $PWD/install-sgx/testcases/bin/execv01.manifest
                sed -i '80 a sgx.allowed_files.execlpchild = "file:execlp01_child"' $PWD/install-sgx/testcases/bin/execlp01.manifest
                sed -i '81 a sgx.allowed_files.execlchild = "file:execl01_child"' $PWD/install-sgx/testcases/bin/execl01.manifest
                make -f Makefile.LTP ltp-sgx_results_1.xml SGX=1 LTPCFG="$CFG" LTPTESTFILE=$PWD$LTPSCENARIO
            '''
            /*
            sh '''
                cd LibOS/shim/test/ltp
                export CFG=ltp-sudo-syscalls.cfg
                export LTPSCENARIO=$PWD/install-sgx/runtest/syscalls-sudo
                make -f Makefile.LTP ltp-sgx_results_2.xml LTPCFG=$CFG LTPTESTFILE=$LTPSCENARIO
            '''
            */
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "LTP Test Failed"'
    } finally {
        archiveArtifacts 'LibOS/shim/test/ltp/ltp-sgx_results_*.xml'
        junit 'LibOS/shim/test/ltp/ltp-sgx_results_*.xml'
    }

    try{
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd Examples/python
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make ${MAKEOPTS} SGX=1 check
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "Python Example Test Failed"'
    }

    try{
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd Examples/bash
                sed -i '/@rm OUTPUT/d' Makefile
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make ${MAKEOPTS} SGX=1 regression
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "Bash Example Test Failed"'
    }

    try {
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd Examples/curl
                sed -i '/@rm OUTPUT/d' Makefile
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make ${MAKEOPTS} SGX=1 check
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "Curl Example Test Failed"'
    }

    try {
        timeout(time: 10, unit: 'MINUTES') {
            sh '''
                cd Examples/gcc
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make ${MAKEOPTS} SGX=1 check
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "GCC Example Test Failed"'
    }

    try {
        timeout(time: 15, unit: 'MINUTES') {
            sh '''
                cd Examples/memcached
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make SGX=1 start-graphene-server &
                ../../Scripts/wait_for_server 60 127.0.0.1 11211
                # memcslap populates server but doesn't report errors, use
                # memcached-tool for this (must return two lines of stats)
                memcslap --servers=127.0.0.1 --concurrency=8
                src/scripts/memcached-tool 127.0.0.1 | wc -l | grep -w "2"
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "Memcached Example Test Failed"'
    }

    try {
        timeout(time: 15, unit: 'MINUTES') {
            sh '''
                # TODO this logic is to check both epoll and select varants, and probably
                # should be split to check both of those separately and on all distros
                if .ci/isdistro xenial
                then
                    USE_SELECT=1
                    export USE_SELECT
                fi

                cd Examples/redis
                make ${MAKEOPTS} ${ARCH_LIB_OPT}
                make ${MAKEOPTS} SGX=1 start-graphene-server &
                ../../Scripts/wait_for_server 60 127.0.0.1 6379
                ./src/src/redis-benchmark 2>&1 | tee OUTPUT
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "Redis Example Test Failed"'
    }

    try {
        timeout(time: 15, unit: 'MINUTES') {
            sh '''
                cd Examples/lighttpd
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make ${MAKEOPTS} SGX=1 start-graphene-server &
                ../../Scripts/wait_for_server 60 127.0.0.1 8003
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh 127.0.0.1:8003
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "Lighttpd Example Test Failed"'
    }

    try {
        timeout(time: 15, unit: 'MINUTES') {
            sh '''
                cd Examples/nginx
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make ${MAKEOPTS} SGX=1 start-graphene-server &
                ../../Scripts/wait_for_server 60 127.0.0.1 8002
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh 127.0.0.1:8002
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "NGINX Example Test Failed"'
    }

        /*
        timeout(time: 25, unit: 'MINUTES') {
            sh '''
                cd Examples/apache
                make ${MAKEOPTS} all
                make ${MAKEOPTS} start-graphene-server &
                ../../Scripts/wait_for_server 60 127.0.0.1 8001
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh 127.0.0.1:8001
                ../../Scripts/wait_for_server 60 127.0.0.1 8443
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh https://127.0.0.1:8443
            '''
        }
        */

    try {    
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
            cd Examples/blender
            if [ "${no_cpu}" -gt 16 ]
            then
                sed -i 's/sgx.enclave_size = "2048M"/sgx.enclave_size = "4G"/g' blender.manifest.template
                sed -i 's/sgx.thread_num = 64/sgx.thread_num = 256/g' blender.manifest.template
            fi
            make ${MAKEOPTS} ${ARCH_LIB_OPT} all
            make ${MAKEOPTS} SGX=1 check	
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "Blender Example Test Failed"'
    }

    try {
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd Examples/r
                sed -i '/@$(RM) OUTPUT/d' Makefile
                os_release_id=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '"')
                if [ "${os_release_id}" == 'rhel' ]
                then
                	sed -i '13 a loader.pal_internal_mem_size = "64M"' R.manifest.template 
                fi                 
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make ${MAKEOPTS} SGX=1 check
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "R Example Test Failed"'
    }
    /*timeout(time: 5, unit: 'MINUTES') {
        sh '''
            # test SGX remote attestation only on Ubuntu 18.04 to keep internet requests to minimum
            .ci/isdistro bionic || exit 0

            cd Examples/ra-tls-mbedtls
            if [ "${ra_client_spid}" != "" ] && [ "${ra_client_key}" != "" ]; \
            then \
                make check_epid RA_CLIENT_SPID=${ra_client_spid} \
                                        RA_TLS_EPID_API_KEY=${ra_client_key} \
                                        RA_CLIENT_LINKABLE=0; \
                make check_epid_fail RA_CLIENT_SPID=${ra_client_spid} \
                                            RA_TLS_EPID_API_KEY=${ra_client_key} \
                                            RA_CLIENT_LINKABLE=0; \
            else \
                echo "Failure: no ra_client_spid and/or ra_client_key!"; \
                exit 1; \
            fi
        '''
    }
    timeout(time: 5, unit: 'MINUTES') {
        sh '''
            # test SGX remote attestation only on Ubuntu 18.04 to keep internet requests to minimum
            .ci/isdistro bionic || exit 0

            cd Examples/ra-tls-secret-prov
            if [ "${ra_client_spid}" != "" ] && [ "${ra_client_key}" != "" ]; \
            then \
                make SGX=1 check_epid RA_CLIENT_SPID=${ra_client_spid} \
                                        RA_TLS_EPID_API_KEY=${ra_client_key} \
                                        RA_CLIENT_LINKABLE=0; \
            else \
                echo "Failure: no ra_client_spid and/or ra_client_key!"; \
                exit 1; \
            fi
        '''
    }*/

    try {
        timeout(time: 2, unit: 'MINUTES') {
            sh 'python3 -m pytest -v --junit-xml workload-regression.xml test_workloads.py'
        }
    } catch (Exception e){
        build_ok = true
        sh 'echo "Workload parser failed"'
    } finally {
        junit 'workload-regression.xml'
    }
}
