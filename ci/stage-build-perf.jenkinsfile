stage('build') {
    if (env.CC == 'clang') {
        env.MESON_OPTIONS += ' -Dmusl=disabled'
    }
    script {
        try {
            sh '''
            cd "$WORKSPACE"
            sed -i "/uname/ a '/usr/src/linux-headers-@0@/arch/x86/include/uapi'.format(run_command('uname', '-r').stdout().split('-generic')[0].strip())," meson.build
            meson setup build \
                --werror \
                --prefix="$PREFIX" \
                --buildtype="$BUILDTYPE" \
                -Ddirect=enabled \
                -Dtests=enabled \
                -Dsgx=enabled \
                $MESON_OPTIONS > meson_cmd_output.txt
            ninja -vC build > ninja_build_log.txt
            ninja -vC build install > ninja_install_log.txt
            gramine-sgx-gen-private-key -f
        '''
        } finally {
            archiveArtifacts 'build/meson-logs/**/*'
            archiveArtifacts 'ninja_build_log.txt'
            archiveArtifacts 'ninja_install_log.txt'                      
        }

        libdir = sh(returnStdout: true, script: '''
                meson introspect build/ --buildoptions \
                | jq -r '(map(select(.name == "prefix")) + map(select(.name == "libdir"))) | map(.value) | join("/")'
            ''').trim()

        env.GRAMINE_PKGLIBDIR = libdir + '/gramine'

        // In CI we install to non-standard --prefix (see above). This makes sure the libraries are
        // available anyway (e.g. gramine-sgx-pf-crypt needs libsgx_util.so).
        env.PKG_CONFIG_PATH = libdir + '/pkgconfig'

        // prevent cheating and testing from repo
        sh 'rm -rf build'
        sh 'git clean -Xf subprojects'
    }
}