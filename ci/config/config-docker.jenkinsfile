env.PREFIX = env.WORKSPACE + '/usr'

env.PATH = env.PREFIX + '/bin:' + env.PATH

// don't mess with PATH before reading this: https://issues.jenkins.io/browse/JENKINS-49076
env.DOCKER_ARGS_COMMON = """
    --net=host
    --device=/dev/kmsg:/dev/kmsg
    --device=/dev/cpu_dma_latency:/dev/cpu_dma_latency
    --env=PATH=${env.PREFIX}/bin:${env.PATH}
    --env=XDG_CACHE_HOME=/tmp/.cache
"""
env.DOCKER_ARGS_SGX = '''
    --volume=/lib/modules:/lib/modules:ro
    --volume=/usr/src:/usr/src:ro
'''

env.JAVAHOME = sh(script: "java -XshowSettings:properties -version 2>&1 > /dev/null \
	            | grep 'java.home' | cut -d'=' -f2", returnStdout: true).trim()

if (fileExists("""${env.WORKSPACE}/scripts/docker_seccomp_aug_2022.json""")) {
	env.DOCKER_ARGS_COMMON += """ --security-opt seccomp=${env.WORKSPACE}/scripts/docker_seccomp_aug_2022.json"""
}
else {
    env.DOCKER_ARGS_COMMON += """ --security-opt seccomp=${env.WORKSPACE}/scripts/docker_seccomp.json"""
}

if (fileExists('/dev/sgx/enclave')) {
    env.DOCKER_ARGS_SGX += ' --device=/dev/sgx/enclave:/dev/sgx/enclave'
}
if (fileExists('/dev/sgx_enclave')) {
    env.DOCKER_ARGS_SGX += ' --device=/dev/sgx_enclave:/dev/sgx_enclave'
}
if (fileExists('/dev/isgx')) {
    env.DOCKER_ARGS_SGX += ' --device=/dev/isgx:/dev/isgx'
}

if (fileExists('/var/run/aesmd/aesm.socket')) {
    env.DOCKER_ARGS_SGX += ' --volume=/var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket'
}

if (fileExists('/etc/sgx_default_qcnl.conf')) {
    env.DOCKER_ARGS_SGX += ' --volume=/etc/sgx_default_qcnl.conf:/etc/sgx_default_qcnl.conf'
}

env.no_cpu = sh(script:'nproc', returnStdout: true).trim()

// Extract OS and version details from jenkins parameter 'base_os'
if (env.base_os) {
    echo 'base OS : ' + base_os
    env.os_release_id=base_os.split(/\d/)[0].trim().split(/:/)[0].trim()
    env.os_version=base_os.substring(os_release_id.length()).trim()
} else {
    if (fileExists('/etc/os-release')) {
        sh '''
            . /etc/os-release
            echo $ID > os_release_id
            echo $VERSION_ID > os_version
        '''
        env.os_release_id=sh(script: 'cat os_release_id', returnStdout: true).trim()
        env.os_version=sh(script: 'cat os_version', returnStdout: true).trim()
    }
}

echo 'OS name : ' + os_release_id
echo 'OS version : ' + os_version

if (env.IS_VM == "1") {
    // only root and `kvm` group can access /dev/kvm, so add `kvm` GID to the in-Docker user
    kvm_gid = sh(returnStdout: true, script: 'getent group kvm | cut -d: -f3').trim()

    // only root and `sgx` group can access /dev/sgx_vepc, so add `sgx` GID to the in-Docker user
    sgx_gid = sh(returnStdout: true, script: 'getent group sgx | cut -d: -f3').trim()

    // Required by QEMU to run the same Linux kernel in VM (because we use host kernel as guest
    // kernel for simplicity)
    env.DOCKER_ARGS_COMMON += """
        --volume=/boot:/boot:ro
        --group-add ${kvm_gid}
        --device=/dev/kvm:/dev/kvm
    """

    env.DOCKER_ARGS_SGX += """
        --volume=/usr/include/x86_64-linux-gnu/asm/sgx.h:/usr/include/asm/sgx.h:ro
        --group-add ${sgx_gid}
        --device=/dev/sgx_vepc:/dev/sgx_vepc
    """
}


// Docker Build environment
env.DOCKER_BUILDKIT=0
env.COMPOSE_DOCKER_CLI_BUILD=0

// CleanUp Docker Environment
sh 'docker system prune -af'