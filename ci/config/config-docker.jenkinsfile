env.PREFIX = '/home/intel/gramine_install/usr'

// don't mess with PATH before reading this: https://issues.jenkins.io/browse/JENKINS-49076
env.DOCKER_ARGS_COMMON = """
    --device=/dev/kmsg:/dev/kmsg
    --device=/dev/cpu_dma_latency:/dev/cpu_dma_latency
    --env=PATH=${env.PREFIX}/bin:${env.PATH}
    --env=XDG_CACHE_HOME=/tmp/.cache
    --security-opt seccomp=${env.WORKSPACE}/Scripts/docker_seccomp.json
    --volume=/usr/bin/stress-ng:/usr/bin/stress-ng
"""
env.DOCKER_ARGS_SGX = '''
    --volume=/lib/modules:/lib/modules:ro
    --volume=/usr/src:/usr/src:ro
    --volume=/usr/bin/stress-ng:/usr/bin/stress-ng
'''

if (fileExists('/dev/sgx/enclave')) {
    env.DOCKER_ARGS_SGX += ' --device=/dev/sgx/enclave:/dev/sgx/enclave'
}
if (fileExists('/dev/sgx_enclave')) {
    env.DOCKER_ARGS_SGX += ' --device=/dev/sgx_enclave:/dev/sgx_enclave'
}
if (fileExists('/dev/isgx')) {
    env.DOCKER_ARGS_SGX += ' --device=/dev/isgx:/dev/isgx'
}
if (fileExists('/dev/gsgx')) {
    env.DOCKER_ARGS_SGX += ' --device=/dev/gsgx:/dev/gsgx'
}
if (fileExists('/var/run/aesmd/aesm.socket')) {
    env.DOCKER_ARGS_SGX += ' --volume=/var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket'
}

env.no_cpu = sh(script:'nproc', returnStdout: true).trim()

// Extract OS and version details from jenkins parameter 'base_os'
if (env.base_os) {
    echo 'base OS : ' + base_os
    env.os_release_id=base_os.split(/\d/)[0].trim()
    env.os_version=base_os.substring(os_release_id.length()).trim()
} else {
    if (fileExists('/etc/os-release')) {
        sh '''
            . /etc/os-release
            echo $ID > os_release_id
            echo $VERSION_ID > os_version
        '''
        env.os_release_id=sh(script: 'cat os_release_id', returnStdout: true).trim()
        env.os_version=sh(script: 'cat os_version', returnStdout: true).trim()
    }
}

echo 'OS name : ' + os_release_id
echo 'OS version : ' + os_version