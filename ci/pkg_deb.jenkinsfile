stage('pkg_deb') {
    try {
        sh '''
            sudo debuild --set-envvar=http_proxy=http://proxy-chain.intel.com:911/ --set-envvar=https_proxy=http://proxy-chain.intel.com:912/
            mkdir package
            sudo cp -rf ../*.deb ./package
            cd package
            sudo apt install -y ./*.deb
            gramine-sgx-gen-private-key
        '''
        } catch (Exception e) {}
    finally {
        archiveArtifacts 'package/*.deb'
    }
}

stage('test') {
    try {
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/helloworld
                make ${MAKEOPTS} all
                make check
            '''
        }
    } catch (Exception e) {}

    try{
        timeout(time: 10, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/bash
                sed -i '/@rm OUTPUT/d' Makefile
                if [ "${os_release_id}" != 'ubuntu' ]
                then
                    sed -i '$ a loader.pal_internal_mem_size = "128M"' manifest.template 
                fi
                make ${MAKEOPTS} all
                make ${MAKEOPTS} SGX=1 regression 2>&1 | tee result.txt
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "Bash Example Test Failed"'
    }

    try {
        timeout(time: 15, unit: 'MINUTES') {
            sh '''
                # TODO this logic is to check both epoll and select varants, and probably
                # should be split to check both of those separately and on all distros
                if .ci/isdistro xenial
                then
                    USE_SELECT=1
                    export USE_SELECT
                fi

                cd CI-Examples/redis
                if [ "${os_release_id}" != 'ubuntu' ]
                then
                    sed -i '$ a loader.pal_internal_mem_size = "64M"' redis-server.manifest.template 
                fi
                make ${MAKEOPTS}
                make ${MAKEOPTS} SGX=1 start-gramine-server &
                ../../Scripts/wait_for_server 60 127.0.0.1 6379
                ./src/src/redis-benchmark 2>&1 | tee OUTPUT
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "Redis Example Test Failed"'
    }

    try {
        timeout(time: 15, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/lighttpd
                if [ "${os_release_id}" != 'ubuntu' ]
                then
                    sed -i '$ a loader.pal_internal_mem_size = "64M"' lighttpd.manifest.template
                fi
                make ${MAKEOPTS} all
                make ${MAKEOPTS} SGX=1 start-gramine-server &
                ../../Scripts/wait_for_server 60 127.0.0.1 8003
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh 127.0.0.1:8003
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "Lighttpd Example Test Failed"'
    }

    try {
        timeout(time: 15, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/nginx
                export PID=$(lsof -t -i:8002)
                if [ "$PID" != "" ]
                then
                    echo "Killing $PID"
                    kill -9 $PID
                fi
                if [ "${os_release_id}" != 'ubuntu' ]
                then
                    sed -i '$ a loader.pal_internal_mem_size = "64M"' nginx.manifest.template
                fi
                make ${MAKEOPTS} all
                make ${MAKEOPTS} SGX=1 start-gramine-server &
                ../../Scripts/wait_for_server 60 127.0.0.1 8002
                LOOP=1 CONCURRENCY_LIST="1 32" ../common_tools/benchmark-http.sh 127.0.0.1:8002
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "NGINX Example Test Failed"'
    }

    try {
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
            cd CI-Examples/blender
            if [ "${no_cpu}" -gt 16 ]
            then
                sed -i 's/sgx.enclave_size = "2048M"/sgx.enclave_size = "4G"/g' blender.manifest.template
                sed -i 's/sgx.thread_num = 64/sgx.thread_num = 256/g' blender.manifest.template
            fi
            if [ "${os_release_id}" != 'ubuntu' ]
            then
                sed -i '$ a loader.pal_internal_mem_size = "64M"' blender.manifest.template
            fi
            make ${MAKEOPTS} all
            make ${MAKEOPTS} SGX=1 check
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "Blender Example Test Failed"'
    }

    try{
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/sqlite
                make ${MAKEOPTS} all
                make ${MAKEOPTS} SGX=1 regression
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "SQLite Example Test Failed"'
    }
}

stage ('verification') {
    try {
        timeout(time: 2, unit: 'MINUTES') {
            sh 'python3 -m pytest -v -m debian_verification --junit-xml workload-regression.xml test_workloads.py'
        }
    } catch (Exception e){
        env.build_ok = true
        sh 'echo "Workload parser failed"'
    } finally {
        junit 'workload-regression.xml'
    }
}

stage('cleanup') {
    sh 'sudo rm -rf $WORKSPACE/*'
}