stage('test-examples') {              
    if (env.SGX == "1") {
        env.MODE = "sgx"
    }
    else {
        env.MODE = "direct"
    }

    if (!((env.no_cpu.toInteger() < 16) && (env.SGX == '1')))
    {
        try {
            env.JAVAHOME = sh(script: "java -XshowSettings:properties -version 2>&1 > /dev/null \
	            | grep 'java.home' | cut -d'=' -f2", returnStdout: true).trim()
            timeout(time: 10, unit: 'MINUTES') {
                sh '''
                    cd CI-Examples/openjdk
                    if [ "${gcc_dump_machine}" == 'x86_64-redhat-linux' ]
                    then
                        sed -i '$ a loader.pal_internal_mem_size = "64M"' java.manifest.template
                        sed -i -e "/file:\\/usr\\/lib\\/jvm\\/java-11-openjdk-amd64/,+d" java.manifest.template
                        sed -i -e "/^sgx.trusted_files = \\[.*/a \\"file:$JAVAHOME\\/lib\\/\\"," java.manifest.template
                    fi
                    make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                    gramine-${MODE} java MultiThreadMain > OUTPUT
                '''
            }
        } catch (Exception e) {
            env.build_ok = false
            sh 'echo "Openjdk Example Test Failed"'
        }
    }

    if (Float.parseFloat(env.os_version) < 21) {
        try {
            timeout(time: 15, unit: 'MINUTES') {
                env.PYTHON_BIN_PATH= sh(script: 'which python3', returnStdout: true).trim()
                sh '''
                    cd CI-Examples/tensorflow-lite
                    ../common_tools/download --output bazel-0.16.1-installer-linux-x86_64.sh \
                    --sha256 17ab70344645359fd4178002f367885e9019ae7507c9c1ade8220f3628383444 \
                    --url https://github.com/bazelbuild/bazel/releases/download/0.16.1/bazel-0.16.1-installer-linux-x86_64.sh
                    chmod +x ./bazel-0.16.1-installer-linux-x86_64.sh
                    ./bazel-0.16.1-installer-linux-x86_64.sh --user
                    if [ "${gcc_dump_machine}" == 'x86_64-redhat-linux' ]
                    then
                        make ${MAKEOPTS} tensorflow/configure
                        sed -i '$ a loader.pal_internal_mem_size = "64M"' label_image.manifest.template
                        sed -i "s/\\/usr\\/bin\\/env python/\\/usr\\/bin\\/env python3/" tensorflow/tensorflow/tools/git/gen_git_source.py
                        make ${ARCH_LIB_OPT} PYTHON_BIN_PATH=${PYTHON_BIN_PATH}
                    fi
                    make ${ARCH_LIB_OPT} all
                    make ${MAKEOPTS} run-gramine > OUTPUT
                '''
            }
        } catch (Exception e){
            env.build_ok = false
            sh 'echo "TensorFlow Example Test Failed"'
        }
    }

    try {
        timeout(time: 10, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/curl
                if [ "${gcc_dump_machine}" == 'x86_64-redhat-linux' ]
                then
                    sed -i '$ a loader.pal_internal_mem_size = "64M"' curl.manifest.template
                fi
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make ${MAKEOPTS} check > RESULT
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "Curl Example Test Failed"'
    }

    try {
        timeout(time: 5, unit: 'MINUTES') {
            sh '''
                cd CI-Examples/nodejs
                if [ "${gcc_dump_machine}" == 'x86_64-redhat-linux' ]
                then
                    sed -i '$ a loader.pal_internal_mem_size = "64M"' nodejs.manifest.template
                    sed -i "s/{{ nodejs_dir }}\\/nodejs/{{ nodejs_dir }}\\/node/g" nodejs.manifest.template
                fi
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                make ${MAKEOPTS} check > RESULT
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "Nodejs Example Test Failed"'
    }

    if (!((env.no_cpu.toInteger() < 16) && (env.SGX == '1')))
    {
        try {
            timeout(time: 5, unit: 'MINUTES') {
                sh '''
                    cd CI-Examples/pytorch
                    if [ "${gcc_dump_machine}" == 'x86_64-redhat-linux' ]
                    then
                        sed -i \'s/"file:{{ python.distlib }}/"file:\\/usr\\/local\\/lib\\/python3.6\\/site-packages/\' pytorch.manifest.template
                    fi
                    python3 download-pretrained-model.py
                    make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                    gramine-${MODE} ./pytorch ./pytorchexample.py
                '''
            }
        } catch (Exception e){
            env.build_ok = false
            sh 'echo "Pytorch Example Test Failed"'
        }
    }

    try {
        timeout(time: 10, unit: 'MINUTES') {
            env.R_HOME = sh(script: 'R RHOME', returnStdout: true).trim()
            sh '''
                cd CI-Examples/r
                if [ "${gcc_dump_machine}" == 'x86_64-redhat-linux' ]
                then
                    sed -i '$ a loader.pal_internal_mem_size = "128M"' R.manifest.template
                    sed -i \'/^sgx.trusted_files = \\[.*/a "file:/usr/bin/sh",\' R.manifest.template
                    sed -i \'/^sgx.trusted_files = \\[.*/a "file:/usr/bin/rm",\' R.manifest.template
                    sed -i 's/sgx.enclave_size = "1G"/sgx.enclave_size = "2G"/' R.manifest.template
                fi
                make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                gramine-${MODE} ./R --slave --vanilla -f scripts/sample.r > RESULT_1
                gramine-${MODE} ./R --slave --vanilla -f scripts/R-benchmark-25.R > RESULT_2
            '''
        }
    } catch (Exception e){
        env.build_ok = false
        sh 'echo "R Example Test Failed"'
    }

    if(env.gcc_dump_machine != "x86_64-redhat-linux")
    {
        if ((Float.parseFloat(env.os_version) < 21) || (!((env.no_cpu.toInteger() < 16) && (env.SGX == '1')))) {
            try {
                timeout(time: 20, unit: 'MINUTES') {
                    sh '''#!/bin/bash
                        cd CI-Examples/openvino
                        chmod +x ./openvino_setup.sh
                        ./openvino_setup.sh
                        source /opt/intel/openvino_2021/bin/setupvars.sh
                        model_name="bert-large-uncased-whole-word-masking-squad-0001"
                        make ${MAKEOPTS} ${ARCH_LIB_OPT} intel_models public_models
                        make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                        gramine-${MODE} benchmark_app -m model/intel/${model_name}/FP32/${model_name}.xml > OUTPUT
                    '''
                }
            } catch (Exception e){
                env.build_ok = false
                sh 'echo "OpenVino Example Test Failed"'
            }
        }

        try {
            timeout(time: 5, unit: 'MINUTES') {
                sh '''
                    cd CI-Examples/rust_helloworld
                    export PATH=/home/intel/rust_binaries/bin:$PATH
                    make run-release-${MODE} 2>&1 | tee OUTPUT.txt
                '''
            }
        } catch (Exception e){
            env.build_ok = false
            sh 'echo "Rust example Test Failed"'
        }

        try {
            timeout(time: 10, unit: 'MINUTES') {
                sh '''
                    cd CI-Examples/gcc
                    make ${MAKEOPTS} ${ARCH_LIB_OPT} all
                    make ${MAKEOPTS} check > OUTPUT
                '''
            }
        } catch (Exception e){
            env.build_ok = false
            sh 'echo "GCC Example Test Failed"'
        }
    }
}
